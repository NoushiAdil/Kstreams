/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.services.streamsDemo.avro.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EmployeeVehicle extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 295773214438059098L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmployeeVehicle\",\"namespace\":\"com.services.streamsDemo.avro.schema\",\"fields\":[{\"name\":\"empId\",\"type\":\"int\",\"default\":-1},{\"name\":\"vehicleNumber\",\"type\":\"float\",\"default\":-100.0},{\"name\":\"vehicleName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"insuranceDetails\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"manufacturingYear\",\"type\":\"float\",\"default\":-100.0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EmployeeVehicle> ENCODER =
      new BinaryMessageEncoder<EmployeeVehicle>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmployeeVehicle> DECODER =
      new BinaryMessageDecoder<EmployeeVehicle>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EmployeeVehicle> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EmployeeVehicle> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EmployeeVehicle>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EmployeeVehicle to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EmployeeVehicle from a ByteBuffer. */
  public static EmployeeVehicle fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int empId;
  @Deprecated public float vehicleNumber;
  @Deprecated public java.lang.CharSequence vehicleName;
  @Deprecated public java.lang.CharSequence insuranceDetails;
  @Deprecated public float manufacturingYear;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmployeeVehicle() {}

  /**
   * All-args constructor.
   * @param empId The new value for empId
   * @param vehicleNumber The new value for vehicleNumber
   * @param vehicleName The new value for vehicleName
   * @param insuranceDetails The new value for insuranceDetails
   * @param manufacturingYear The new value for manufacturingYear
   */
  public EmployeeVehicle(java.lang.Integer empId, java.lang.Float vehicleNumber, java.lang.CharSequence vehicleName, java.lang.CharSequence insuranceDetails, java.lang.Float manufacturingYear) {
    this.empId = empId;
    this.vehicleNumber = vehicleNumber;
    this.vehicleName = vehicleName;
    this.insuranceDetails = insuranceDetails;
    this.manufacturingYear = manufacturingYear;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return empId;
    case 1: return vehicleNumber;
    case 2: return vehicleName;
    case 3: return insuranceDetails;
    case 4: return manufacturingYear;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: empId = (java.lang.Integer)value$; break;
    case 1: vehicleNumber = (java.lang.Float)value$; break;
    case 2: vehicleName = (java.lang.CharSequence)value$; break;
    case 3: insuranceDetails = (java.lang.CharSequence)value$; break;
    case 4: manufacturingYear = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'empId' field.
   * @return The value of the 'empId' field.
   */
  public java.lang.Integer getEmpId() {
    return empId;
  }

  /**
   * Sets the value of the 'empId' field.
   * @param value the value to set.
   */
  public void setEmpId(java.lang.Integer value) {
    this.empId = value;
  }

  /**
   * Gets the value of the 'vehicleNumber' field.
   * @return The value of the 'vehicleNumber' field.
   */
  public java.lang.Float getVehicleNumber() {
    return vehicleNumber;
  }

  /**
   * Sets the value of the 'vehicleNumber' field.
   * @param value the value to set.
   */
  public void setVehicleNumber(java.lang.Float value) {
    this.vehicleNumber = value;
  }

  /**
   * Gets the value of the 'vehicleName' field.
   * @return The value of the 'vehicleName' field.
   */
  public java.lang.CharSequence getVehicleName() {
    return vehicleName;
  }

  /**
   * Sets the value of the 'vehicleName' field.
   * @param value the value to set.
   */
  public void setVehicleName(java.lang.CharSequence value) {
    this.vehicleName = value;
  }

  /**
   * Gets the value of the 'insuranceDetails' field.
   * @return The value of the 'insuranceDetails' field.
   */
  public java.lang.CharSequence getInsuranceDetails() {
    return insuranceDetails;
  }

  /**
   * Sets the value of the 'insuranceDetails' field.
   * @param value the value to set.
   */
  public void setInsuranceDetails(java.lang.CharSequence value) {
    this.insuranceDetails = value;
  }

  /**
   * Gets the value of the 'manufacturingYear' field.
   * @return The value of the 'manufacturingYear' field.
   */
  public java.lang.Float getManufacturingYear() {
    return manufacturingYear;
  }

  /**
   * Sets the value of the 'manufacturingYear' field.
   * @param value the value to set.
   */
  public void setManufacturingYear(java.lang.Float value) {
    this.manufacturingYear = value;
  }

  /**
   * Creates a new EmployeeVehicle RecordBuilder.
   * @return A new EmployeeVehicle RecordBuilder
   */
  public static com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder newBuilder() {
    return new com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder();
  }

  /**
   * Creates a new EmployeeVehicle RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmployeeVehicle RecordBuilder
   */
  public static com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder newBuilder(com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder other) {
    return new com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder(other);
  }

  /**
   * Creates a new EmployeeVehicle RecordBuilder by copying an existing EmployeeVehicle instance.
   * @param other The existing instance to copy.
   * @return A new EmployeeVehicle RecordBuilder
   */
  public static com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder newBuilder(com.services.streamsDemo.avro.schema.EmployeeVehicle other) {
    return new com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder(other);
  }

  /**
   * RecordBuilder for EmployeeVehicle instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmployeeVehicle>
    implements org.apache.avro.data.RecordBuilder<EmployeeVehicle> {

    private int empId;
    private float vehicleNumber;
    private java.lang.CharSequence vehicleName;
    private java.lang.CharSequence insuranceDetails;
    private float manufacturingYear;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.empId)) {
        this.empId = data().deepCopy(fields()[0].schema(), other.empId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.vehicleNumber)) {
        this.vehicleNumber = data().deepCopy(fields()[1].schema(), other.vehicleNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vehicleName)) {
        this.vehicleName = data().deepCopy(fields()[2].schema(), other.vehicleName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.insuranceDetails)) {
        this.insuranceDetails = data().deepCopy(fields()[3].schema(), other.insuranceDetails);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.manufacturingYear)) {
        this.manufacturingYear = data().deepCopy(fields()[4].schema(), other.manufacturingYear);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EmployeeVehicle instance
     * @param other The existing instance to copy.
     */
    private Builder(com.services.streamsDemo.avro.schema.EmployeeVehicle other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.empId)) {
        this.empId = data().deepCopy(fields()[0].schema(), other.empId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.vehicleNumber)) {
        this.vehicleNumber = data().deepCopy(fields()[1].schema(), other.vehicleNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vehicleName)) {
        this.vehicleName = data().deepCopy(fields()[2].schema(), other.vehicleName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.insuranceDetails)) {
        this.insuranceDetails = data().deepCopy(fields()[3].schema(), other.insuranceDetails);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.manufacturingYear)) {
        this.manufacturingYear = data().deepCopy(fields()[4].schema(), other.manufacturingYear);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'empId' field.
      * @return The value.
      */
    public java.lang.Integer getEmpId() {
      return empId;
    }

    /**
      * Sets the value of the 'empId' field.
      * @param value The value of 'empId'.
      * @return This builder.
      */
    public com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder setEmpId(int value) {
      validate(fields()[0], value);
      this.empId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'empId' field has been set.
      * @return True if the 'empId' field has been set, false otherwise.
      */
    public boolean hasEmpId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'empId' field.
      * @return This builder.
      */
    public com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder clearEmpId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleNumber' field.
      * @return The value.
      */
    public java.lang.Float getVehicleNumber() {
      return vehicleNumber;
    }

    /**
      * Sets the value of the 'vehicleNumber' field.
      * @param value The value of 'vehicleNumber'.
      * @return This builder.
      */
    public com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder setVehicleNumber(float value) {
      validate(fields()[1], value);
      this.vehicleNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleNumber' field has been set.
      * @return True if the 'vehicleNumber' field has been set, false otherwise.
      */
    public boolean hasVehicleNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'vehicleNumber' field.
      * @return This builder.
      */
    public com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder clearVehicleNumber() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicleName' field.
      * @return The value.
      */
    public java.lang.CharSequence getVehicleName() {
      return vehicleName;
    }

    /**
      * Sets the value of the 'vehicleName' field.
      * @param value The value of 'vehicleName'.
      * @return This builder.
      */
    public com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder setVehicleName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.vehicleName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicleName' field has been set.
      * @return True if the 'vehicleName' field has been set, false otherwise.
      */
    public boolean hasVehicleName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'vehicleName' field.
      * @return This builder.
      */
    public com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder clearVehicleName() {
      vehicleName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'insuranceDetails' field.
      * @return The value.
      */
    public java.lang.CharSequence getInsuranceDetails() {
      return insuranceDetails;
    }

    /**
      * Sets the value of the 'insuranceDetails' field.
      * @param value The value of 'insuranceDetails'.
      * @return This builder.
      */
    public com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder setInsuranceDetails(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.insuranceDetails = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'insuranceDetails' field has been set.
      * @return True if the 'insuranceDetails' field has been set, false otherwise.
      */
    public boolean hasInsuranceDetails() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'insuranceDetails' field.
      * @return This builder.
      */
    public com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder clearInsuranceDetails() {
      insuranceDetails = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'manufacturingYear' field.
      * @return The value.
      */
    public java.lang.Float getManufacturingYear() {
      return manufacturingYear;
    }

    /**
      * Sets the value of the 'manufacturingYear' field.
      * @param value The value of 'manufacturingYear'.
      * @return This builder.
      */
    public com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder setManufacturingYear(float value) {
      validate(fields()[4], value);
      this.manufacturingYear = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'manufacturingYear' field has been set.
      * @return True if the 'manufacturingYear' field has been set, false otherwise.
      */
    public boolean hasManufacturingYear() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'manufacturingYear' field.
      * @return This builder.
      */
    public com.services.streamsDemo.avro.schema.EmployeeVehicle.Builder clearManufacturingYear() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmployeeVehicle build() {
      try {
        EmployeeVehicle record = new EmployeeVehicle();
        record.empId = fieldSetFlags()[0] ? this.empId : (java.lang.Integer) defaultValue(fields()[0]);
        record.vehicleNumber = fieldSetFlags()[1] ? this.vehicleNumber : (java.lang.Float) defaultValue(fields()[1]);
        record.vehicleName = fieldSetFlags()[2] ? this.vehicleName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.insuranceDetails = fieldSetFlags()[3] ? this.insuranceDetails : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.manufacturingYear = fieldSetFlags()[4] ? this.manufacturingYear : (java.lang.Float) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmployeeVehicle>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmployeeVehicle>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmployeeVehicle>
    READER$ = (org.apache.avro.io.DatumReader<EmployeeVehicle>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
